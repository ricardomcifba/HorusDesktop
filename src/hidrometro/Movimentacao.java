/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hidrometro;

import entidade.Lotacoes;
import hidrometro.dao.sql.HidrometroDAOSQL;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author e127787
 */
public class Movimentacao extends javax.swing.JFrame {

    /**
     * Creates new form Cadastro
     */
    public Movimentacao() {
        initComponents();
    }

    public static Movimentacao getInstance() {
        if (instance == null) {
            instance = new Movimentacao();
        }
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        codHidrometro = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        codOrigem = new javax.swing.JTextField();
        codDestino = new javax.swing.JTextField();
        btnEncerrar = new javax.swing.JToggleButton();
        btnCadastrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaMov = new javax.swing.JTable();
        btnExportar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnDesfazer = new javax.swing.JButton();
        btnVoltar = new javax.swing.JButton();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        codHidrometro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codHidrometroActionPerformed(evt);
            }
        });
        codHidrometro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                codHidrometroKeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel1.setText("Movimentação de Hidrômetros");

        jLabel2.setText("Código de Barras: (Idenfiticador)");

        jLabel3.setText("Lotação Atual:");

        jLabel4.setText("Lotação de Destino:");

        codOrigem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codOrigemActionPerformed(evt);
            }
        });

        codDestino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                codDestinoActionPerformed(evt);
            }
        });

        btnEncerrar.setText("Encerrar");
        btnEncerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEncerrarActionPerformed(evt);
            }
        });

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.setEnabled(false);
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        tabelaMov.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N.º Hidrômetro", "Data/Hora", "Origem", "Destino"
            }
        ));
        jScrollPane1.setViewportView(tabelaMov);

        btnExportar.setText("Exportar");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        jLabel6.setText("Qtd.:");

        btnDesfazer.setText("Desfazer");

        btnVoltar.setText("<<< Voltar");
        btnVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(codOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(35, 35, 35)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(codDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(13, 13, 13)
                                .addComponent(codHidrometro, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCadastrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDesfazer))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnVoltar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnExportar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEncerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(162, 162, 162)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codOrigem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(codDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codHidrometro, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCadastrar)
                    .addComponent(btnDesfazer))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEncerrar)
                    .addComponent(btnExportar)
                    .addComponent(btnVoltar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void codHidrometroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codHidrometroActionPerformed

        if (!codHidrometro.getText().equals("")) {

            HidrometroDAOSQL hddsql = new HidrometroDAOSQL();
            DefaultTableModel model = (DefaultTableModel) tabelaMov.getModel();
            String hd = codHidrometro.getText();
            char l = hd.charAt(4);
            if (l == 'V' || l == 'v') {
                String vertical = (codHidrometro.getText()).substring(0, 4) + 0 + (codHidrometro.getText().substring(5));
                if (hddsql.exists(vertical)) {
                    try {
                        if (Lotacoes.lotacao(codOrigem.getText()).equals(hddsql.locRastro(vertical))) {
                            try {
                                hddsql.movimento(vertical, codOrigem.getText(), codDestino.getText());
                                model.addRow(new Object[]{codHidrometro.getText(), (cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" + cal.get(Calendar.YEAR) + " " + data.getHours() + ":" + data.getMinutes() + ":" + data.getSeconds()), codOrigem.getText(), codDestino.getText()});

                                jLabel5.setText(String.valueOf(cont));
                                cont++;
                            } catch (Exception ex) {
                                Logger.getLogger(Recuperados.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Hidrômetro já foi movimentado para a unidade " + hddsql.locRastro(vertical));
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(Movimentacao.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "Hidrômetro não localizado na base");
                }
            }
            if (hddsql.exists(codHidrometro.getText())) {
                try {
                    //Verifica se o hidrômetro está na lotacao de origem
                    if (Lotacoes.lotacao(codOrigem.getText()).equals(hddsql.locRastro(codHidrometro.getText()))) {
                        try {
                            hddsql.movimento(codHidrometro.getText(), codOrigem.getText(), codDestino.getText());
                            model.addRow(new Object[]{codHidrometro.getText(), (cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" + cal.get(Calendar.YEAR) + " " + data.getHours() + ":" + data.getMinutes() + ":" + data.getSeconds()), codOrigem.getText(), codDestino.getText()});

                            jLabel5.setText(String.valueOf(cont));
                            cont++;
                        } catch (Exception ex) {
                            Logger.getLogger(Recuperados.class.getName()).log(Level.SEVERE, null, ex);

                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Hidrômetro já foi movimentado para a unidade " + hddsql.locRastro(codHidrometro.getText()));
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(Movimentacao.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Hidrômetro não localizado na base");
        }

        limpar();

    }//GEN-LAST:event_codHidrometroActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        JFileChooser fc = new JFileChooser();
        int option = fc.showSaveDialog(tabelaMov);
        if (option == JFileChooser.APPROVE_OPTION) {
            String filename = fc.getSelectedFile().getName();
            String path = fc.getSelectedFile().getParentFile().getPath();
            int len = filename.length();
            String ext = "";
            String file = "";
            if (len > 4) {
                ext = filename.substring(len - 4, len);
            }
            if (ext.equals(".xls")) {
                file = path + "\\" + filename;
            } else {
                file = path + "\\" + filename + ".xls";
            }
            try {
                toExcel(tabelaMov, new File(file));
            } catch (IOException ex) {
                Logger.getLogger(Movimentacao.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnExportarActionPerformed

    private void codHidrometroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_codHidrometroKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_codHidrometroKeyReleased

    private void codOrigemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codOrigemActionPerformed
        if (!codOrigem.getText().equals("")) {
            codDestino.requestFocus();
        }
    }//GEN-LAST:event_codOrigemActionPerformed

    private void btnEncerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEncerrarActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnEncerrarActionPerformed

    private void codDestinoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_codDestinoActionPerformed
        codHidrometro.requestFocus();
    }//GEN-LAST:event_codDestinoActionPerformed

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        HidrometroDAOSQL hddsql = new HidrometroDAOSQL();
        DefaultTableModel model = (DefaultTableModel) tabelaMov.getModel();
        try {
            hddsql.movimento(codHidrometro.getText(), codOrigem.getText(), codDestino.getText());
            model.addRow(new Object[]{codHidrometro.getText(), (cal.get(Calendar.DATE) + "/" + (cal.get(Calendar.MONTH) + 1) + "/" + cal.get(Calendar.YEAR) + " " + data.getHours() + ":" + data.getMinutes() + ":" + data.getSeconds()), codOrigem.getText(), codDestino.getText()});
        } catch (Exception ex) {
            Logger.getLogger(Recuperados.class.getName()).log(Level.SEVERE, null, ex);
        }
        limpar();
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void btnVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoltarActionPerformed
        this.dispose();
        Login.getInstance().setVisible(true);
    }//GEN-LAST:event_btnVoltarActionPerformed

    public String toString() {
        return codHidrometro.getText() + " - " + new Date() + " - " + codOrigem.getText() + " - " + codDestino.getText();
    }

    public void limpar() {
        //codDestino.setText("");
        codHidrometro.setText("");
        //codOrigem.setText("");
    }

//Metodo exportar tabela para Excel
    public void toExcel(JTable table, File file) throws IOException {
        try {
            TableModel model = table.getModel();
            FileWriter excel = new FileWriter(file);

            for (int i = 0; i < model.getColumnCount(); i++) {
                excel.write(model.getColumnName(i) + "\t");
            }

            excel.write("\n");

            for (int i = 0; i < model.getRowCount(); i++) {
                for (int j = 0; j < model.getColumnCount(); j++) {
                    excel.write(model.getValueAt(i, j).toString() + "\t");
                }
                excel.write("\n");
            }

            excel.close();

        } catch (IOException e) {
            System.out.println(e);
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Movimentacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Movimentacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Movimentacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Movimentacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Movimentacao().setVisible(true);
            }
        });
    }
    Calendar cal = Calendar.getInstance();
    Date data = new Date();
    int cont = 1; //Utilizado para contar quantidade de itens da Lista da Tabela

    private static Movimentacao instance;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnDesfazer;
    private javax.swing.JToggleButton btnEncerrar;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnVoltar;
    private javax.swing.JTextField codDestino;
    private javax.swing.JTextField codHidrometro;
    private javax.swing.JTextField codOrigem;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaMov;
    // End of variables declaration//GEN-END:variables

}
